// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/content.proto

package grpc_demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentManagementClient is the client API for ContentManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentManagementClient interface {
	CreateContent(ctx context.Context, in *NewContent, opts ...grpc.CallOption) (*Content, error)
	CreateALotOfContents(ctx context.Context, opts ...grpc.CallOption) (ContentManagement_CreateALotOfContentsClient, error)
}

type contentManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewContentManagementClient(cc grpc.ClientConnInterface) ContentManagementClient {
	return &contentManagementClient{cc}
}

func (c *contentManagementClient) CreateContent(ctx context.Context, in *NewContent, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := c.cc.Invoke(ctx, "/content.ContentManagement/CreateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagementClient) CreateALotOfContents(ctx context.Context, opts ...grpc.CallOption) (ContentManagement_CreateALotOfContentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentManagement_ServiceDesc.Streams[0], "/content.ContentManagement/CreateALotOfContents", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentManagementCreateALotOfContentsClient{stream}
	return x, nil
}

type ContentManagement_CreateALotOfContentsClient interface {
	Send(*NewContent) error
	Recv() (*Content, error)
	grpc.ClientStream
}

type contentManagementCreateALotOfContentsClient struct {
	grpc.ClientStream
}

func (x *contentManagementCreateALotOfContentsClient) Send(m *NewContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentManagementCreateALotOfContentsClient) Recv() (*Content, error) {
	m := new(Content)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentManagementServer is the server API for ContentManagement service.
// All implementations must embed UnimplementedContentManagementServer
// for forward compatibility
type ContentManagementServer interface {
	CreateContent(context.Context, *NewContent) (*Content, error)
	CreateALotOfContents(ContentManagement_CreateALotOfContentsServer) error
	mustEmbedUnimplementedContentManagementServer()
}

// UnimplementedContentManagementServer must be embedded to have forward compatible implementations.
type UnimplementedContentManagementServer struct {
}

func (UnimplementedContentManagementServer) CreateContent(context.Context, *NewContent) (*Content, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContent not implemented")
}
func (UnimplementedContentManagementServer) CreateALotOfContents(ContentManagement_CreateALotOfContentsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateALotOfContents not implemented")
}
func (UnimplementedContentManagementServer) mustEmbedUnimplementedContentManagementServer() {}

// UnsafeContentManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentManagementServer will
// result in compilation errors.
type UnsafeContentManagementServer interface {
	mustEmbedUnimplementedContentManagementServer()
}

func RegisterContentManagementServer(s grpc.ServiceRegistrar, srv ContentManagementServer) {
	s.RegisterService(&ContentManagement_ServiceDesc, srv)
}

func _ContentManagement_CreateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagementServer).CreateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/content.ContentManagement/CreateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagementServer).CreateContent(ctx, req.(*NewContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagement_CreateALotOfContents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentManagementServer).CreateALotOfContents(&contentManagementCreateALotOfContentsServer{stream})
}

type ContentManagement_CreateALotOfContentsServer interface {
	Send(*Content) error
	Recv() (*NewContent, error)
	grpc.ServerStream
}

type contentManagementCreateALotOfContentsServer struct {
	grpc.ServerStream
}

func (x *contentManagementCreateALotOfContentsServer) Send(m *Content) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentManagementCreateALotOfContentsServer) Recv() (*NewContent, error) {
	m := new(NewContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentManagement_ServiceDesc is the grpc.ServiceDesc for ContentManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "content.ContentManagement",
	HandlerType: (*ContentManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContent",
			Handler:    _ContentManagement_CreateContent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateALotOfContents",
			Handler:       _ContentManagement_CreateALotOfContents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/content.proto",
}
